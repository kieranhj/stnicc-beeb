STNICCC2000 for the Atari STe
https://www.pouet.net/prod.php?which=1251

File description: http://arsantica-online.com/st-niccc-competition/

The stream contains flags, palette-data and vertex-/polygon-data for 1800 frames.
The stream is segmented in 64KB blocks.
A frame never crosses such a 64KB boundary.
Polygons can have 3-15 vertices.
Polygons can cover each other, so a non-convex polygon filler is needed.
Polygons are rendered to a 256×200 pixel screen in 4 bit color depth.
The palette (16 out of 512 colors) can change from frame to frame.
Words are 2 bytes in big endian order.
Colors are stored as words in Atari-ST format 00000RRR0GGG0BBB (512 possible colors).

Every frame stores the following data:

1 byte Flags Bit 0: Frame needs to clear the screen.
Bit 1: Frame contains palette data.
Bit 2: Frame is stored in indexed mode.

If frame contains palette data
{
    1 word Bitmask

    For every set bit in the Bitmask (0-15)
    {
        1 word Color The color has to be copied into the palette at the reverse index of the actual bit,
        because the bitmask is stored in reverse order.
        In other words: If bit 15 of mask is set -> update color 0 of palette,
        …
        if bit 0 of mask is set -> update color 15 of palette.
    }
}

If frame is stored in indexed mode
{
    1 byte Number of vertices (0-255)

    For every Vertex
    {
        1 byte X-position
        1 byte Y-position
    }

    While (…)
    {
        1 byte Poly-descriptor Contains: hi-nibble – 4 bits color-index
        lo-nibble – 4 bits number of polygon vertices

        Some special cases are encoded in the descriptor byte:
        $ff = End of frame
        $fe = End of frame and the stream skips to the next 64KB block
        $fd = End of stream (we are done \o/)

        For every vertex of the polygon
        {
            1 byte Vertex-id (0-255)
        }
    }
}
Else if frame is stored in non-indexed mode
{
    while (…)
    {
        1 byte Poly-descriptor (See indexed mode)

        For every vertex of the polygon
        {
            1 byte X-position
            1 byte Y-position
        }
    }
}

Stats from Python parser
~~~
Total frames =  1800
Max polys =  164  on frame  0
Max verts =  220  on frame  3
Max poly size =  7  on frame  65
Total polys =  75340  average  41  polys/frame

Total byte = 639976 ~= 625K
Average bytes / frame ~= 356
Fast Amiga version runs it at about 17fps average
Presume original Atari version is about half that then!
Newer Atari versions run about 15fps
So 10fps would be extremely optimistic for Beeb!
Max data rate then 10*356 ~= 3.5k/s

Platform?
~~~
Should (just about) fit on a single ADFS L disc (640K)
Can read sector by sector from an ADFS disc.
Could also do this from a DFS disc but would require all 4x drives (total 800K)
Question now becomes whether to do this or not?
Depends if it is possible to get the streaming working and run the demo at the
same time.
Guess this is the same as the Bad Apple problem but without the music sync problem.
If want to make it available to as many people as possible, what's the best solution?

Master only would be the easiest - then just put it on an ADFS disc.
What would be needed to run on a Model B? Assuming everyone has tons of SWRAM.
I guess the streaming buffer size becomes the main question.
Probably going to be closer to 5fps than 10fps?

Debug ideas
~~~
Info pane:
- Frame #
- Vsync count
- Real time
- Any sort of poly stats
- FPS

Debug pane could be in MODE 4, single buffered, after the main window using vrup.
Single frame step on keypress. - DONE
Run to frame X (then single step). - DONE
Toggle solid / wireframe draw on paused frame.

Optimisations
~~~
First few frames take &34 = 52 vsyncs!!
These are 200+ verts and 160+ polys, each 3-4 sides.
Probably 500+ calls to drawline_into_span_buffer.
How many span calls?! 1600?!

Inside the tunnel is about &10 vsyncs..
Blocking load takes &10-&16 frames.

Unroll cls completely x2.
Don't copy verts into temp location (low)
Don't init span buffer every time - get span plot to set it back.
    - Saves 19 vsyncs!!! Now &21=33!

Simplify drawline_into_span_buffer code:
 - Self-mod INX/DEX and INY/DEY directly rather than branches. - DONE
 - Can we keep accumulator without having to store back to ZP?
 - Inline plot_pixel_into_span_buffer. - DONE
Possible to completely unroll Bresenham somehow?
 (Might need to duplicate the routine x4 but could be worth it?)

Put get_byte into ZP. - DONE

Plot span:
 - span_start should always be <= span_end w/ span buffer - DONE
 - Any coherency between calls to reduce start address calc?
 - Unroll long span plot - DONE
 - Divide width by 4 so can just dex - DONE (or remove altogether).
 - Any savings in plot_short_span? Inline plot_pixel_at? - DONE

Vsync on timer at line 200.
Frame swap on vsync.
Run ahead and block plot until swapped.

Only plot every other scanline?! What does this look like? - DONE

Optimisation progress:
 5/11 - first frame down to &1E=30 vsyncs
 5/11 - unrolled CLS a bit - down to &1D vsyncs
 7/11 - align to 7.5K, inline get_byte, inline pixel_plot - down to &1C vsyncs
 8/11 - unroll plot_short_span - down to &19 vsyncs!

Tidy up code
~~~
Move everything into separate modules in src/ - DONE
Add disk 2,1 & 3 - DONE
Build process for creating DSDs. - DONE
Test end-to-end. - DONE
Remove unnecessary DEFINEs.

Optimise plot_span
~~~
Not taking advantage of the fact that spans are contiguous in Y for many lines
Average 40 spans per poly..!

Compute writeptr as the start address on the line inc. scanline
Compute Y as column index

Think need to special case small spans of 2 bytes as seems to be a common case.

There are some incredibly small polys!
This gets worse when using half res. E.g. Frame 4:
     Polygon 3: Colour = 2 Num vertices = 3
        Vertices = [7, 8, 9]
          Edge 0 = [ 254, 98 ]
          Edge 1 = [ 255, 99 ]
          Edge 2 = [ 255, 98 ]
 Becomes co-incident point
 Worth culling these?

10/11/2019
~~~
First fully streamed version working. Final vsync counts:

Full plot: 33876 vsyncs / 1800 frames = 18.8 vsyncs/frame = 2.66fps
Skipped scanlines: 21358 vsyncs = 11.9 vsyncs/frame = 4.2fps
Doubled scanlines: 22986 vsyncs = 12.77 vsyncs/frame = 3.9fps

Target framerate = 5fps for doubled scanlines = 10 vsyncs / frame
1800 frames => total vsync target = 18000

So need to save 5000 vsyncs across 1800 frames
Or ~2.77 vsyncs per frame! (That's a lot). Or 111,000 cycles per frame. Gulp.
Average of 40 polys per frame / 1000 spans.
Looking to save ~111 cycles per span (seems optimistic).
Or 2775 cycles per poly (also seems optimistic).

Profile how much time each section takes:
- Parse
- Line draw
- Span fill
Where's the opportunity?

For every line of code:
- Do we need to do this at all? Can it be removed?
- Can we reorder instructions to save cycles?
- Look for any loops, unrolling potential or SMC
- Can we avoid temporary storage of values?
- What does the 'perfect' code look like? How do we get there?

Inc. Med span = 32108
w/out med span = 32061

Not copying the vertex data save a measly 2 vsyncs :(
Pre-dividing the vertices saves another 10 vsyncs.

12/11/2019 - full run now &7A4D = 31309!
First 100 frames = &67F = 1663 vsyncs.
After row unrolling = &79AA = 31146

14/11/2019
After short + medium span merge = &7701!

15/11/2019
After TomS updates = &7590!
First 100 full res = &63D!
Half res = 1096 vsyncs = 4.5fps!
Double res = 1167 vsyncs = 4.28fps!

Full run at double res = &5200 = 4.29fps!

Perf ideas
~~~
Still need to do full inlining of final fns.
Check all tables and branches for PAGE crossing
What about unrolling medium span for 4 bytes?
Can we expand span_colour to include pixel and screen masks?
So can do `and span_colour, X` directly rather than lda:and:sta ?

18/11/2019
~~~
Remove a couple of redundant stores in line_loop: &74B0 Master@HQ
BBC Model B: &73AE @ HighQ?!

Check page alignment for tables and branches: &7470 Master@HQ
BBCB@HQ = &736F.

Moving Timer 1: Master@HQ = &7280
Master@LQ = 4.94 fps but runs out of data switching to disc 3!

20/11
Master@HQ = &71D9

Palette pondersing
~~~

ST is a 9-bit palette = 512 colours
If we shift down to a 6-bit palette = 64 colour patterns
3 actual colours + black
Stipple pattern of 4x4 pixels - trivially get 4 shades of dither

Palette problem:
1. Closest two Beeb colours to the desired colour
2. Blend value => dither pattern between those two colours
3. Which actual colours are available?
4. When and how do we update the actual colours available?
5. Palette entry then becomes 4x bytes corresponding to the dither pattern between 'best' two actual colours available

See pal.txt
108 frames with palette changes.
Only 149 actual palette changes.
Many redundant or minor changes that could be removed.
Looks like <= 32 main segments of palette in the sequence.

Keep the motif colours, like the yellow throughout.
Identify the colour theme for the segment.
Transitions between segments may have to suffer.
Better to have a contrasting palette than blurred into a pixely mess.

149 palette changes x 4 bytes
Could just have a stream of dither bytes to copy into palette array
Perhaps move palette array to ZP?

How to trigger colour palette changes?
Have a palette data stream.
For each palette containing frame have a descriptor
#colour changes << 4 | #palette updates

Colour bytes first: 4x colour values ready to send to ULA

We might want to change more or less of the palette entries
But do we need to?
Only if there is a palette entry using a colour that will be redefined

Do the colour changes first then worry about palette updates

Each palette update is:
Entry # [0-15]
Dither [1-16] (can skip all 0)
Colour 1 [0-7]
Colour 2 [0-7]

Palette change relatively expensive to compute at run-time but is a
cost proportional to the #frames

HQ w/ palette jsbeeb Master = &72D0
Now &7299 => extra &C0 frames for palette changes.
192 frames when there are ~ 100 instances?! Odd!
After removing all page crossing = &7233 => 90 frames more for palette :\
Hmmm, still &7233 without palette switch!
Not sure how this has changed from previous measurement of &71D9?!

Timer1 was in the wrong place after screen was centred vertically!
Now down to (jsbeeb):
Master@HQ = &7178 = 3.10 fps!
Master@MQ = &4E18 = 4.50 fps! (ModelB = &4D85 = 4.53 fps!) = 11.1 vs/fr
Master@LQ = &4758 = 4.93 fps!

Fixing degenerate polys actually makes MQ marginally faster: Master@MQ = &4E0A.
I think the altered split of frame data across the disks has also helped a bit.

Removing the initial buffer fill from the timing helps as well!
Master@HQ = &712A = 3.11 fps!
Master@LQ = &4702 = 4.95 fps!
_DEBUG=FALSE saves another 50 vsyncs!

Skipping odd numbered frames...
Master@HQ = &3FEF = 5.50 fps!
Master@MQ = &2E3E = 7.60 fps!
Master@LQ = &2B0A = 8.17 fps!

More optimisation genius from RTW:

(screen AND (NOT mask)) OR (data AND mask)
LDA mask
EOR #&FF
AND (screen),Y
STA temp
LDA mask
AND data
ORA temp
But this is equivalent, and less messy:
((screen EOR data) AND mask) EOR screen
LDA (screen),Y
EOR data
AND mask
EOR (screen),Y

We need:
(mask AND (screen EOR data)) EOR screen
LDA mask
BEQ early_out
Just early out anyway.

Skipping odd frames with proper data after re-encoding the stream
Plus Rich's mask optimisation above:
Master@LQ = &2306 = 10.03 fps (effective)?!
Master@MQ = &2668 = 9.15 efps
Master@HQ = &37AE = 6.3 efps

Need to check palette combining works for NULA.
Make sure the later palette value is kept, not the earlier one!
^- DONE. Need to check NULA version still works.

Intro
~~~
"This is *not* a Falcon demo"
10 chars per row with 8x8 gylphs using 4x4 pixel blocks per glyph pixel.
MODE 1 => 320 pix = 10 * 8 * 4
Use default font set.
Glyph 'pixels' appear a row at a time, left to right.
'Pixels' appear in a circular pattern then lerp to their final spot.
This means lerp must be over a constant number of frames, rather than a constant velocity.
Plot the 'pixels' EOR to move.
'Pixels' have to be plotted to screen pixel accuracy.
Maybe use term 'glixel' => glyph pixel?

Outro
~~~
Wireframe render in quarter screen.
Font text in opposite corner of the screen.
Could this work in MODE 1?
Need to double buffer the line draw but not enough RAM to double buffer the entire screen.
Could just display a 40 column wide MODE 1 screen for the top / bottom half
So 40x16 characters = 640 chars = 5K
And double buffer this.
Bottom half would be full 80 column MODE 1.
Would need to rupture this screen whilst also doing the decode.
'Just' need a timer in first and second halves of the screen.
How much RAM would be left over for a font in MODE 1?
Say 40x glyphs at 12x16 pixels = 3x16 bytes = 40 * 48 bytes = 1920 bytes.

TODO
- Set up IRQ2 for rupture:
    - Top double buffered 32 columns x ~16 rows MODE 1 - done
    - Bottom single buffered 80 columns x 16 rows MODE 1 - done
- Plot 16x16 pixels using standard BBC glyphs (iconic)
- Plot one glyph per vsync plus flashing "cursor" in 20x8 window

Either scroll lines up (might be a pain with rupture?)
Or erase lines quickly with "cursor". Can plot 160 chars in ~3 seconds.
Fill window -> wait -> erase -> fill window -> etc.

Sudden crazy thought about triple buffering...
~~~
Screen is 32 chars x 25 rows x 8 bytes per char = 6400 bytes = &1900 bytes
Triple buffer = &1900 x 3 = &4800
Stream buffer = 3x 2560 = &1E00
Total RAM = &6600
PAGE = &1A00..!
Just move all code in SWRAM and run from there?!
Still need to poll for rendering a new frame more than once per vsync...
Does work if FramePeriod is set to 156 lines (but is slower, of course).

Vertical Rupture
First cycle:
Vertical total = 16
Vertical displayed = 16
Horizontal displayed = 32
No vsync
Set CRTC address to fixed value

Second cycle:
Vertical total = 39-16
Vertical displayed = 16
Horizontal displayed = 80
Vsync at 35-16

Vsync
Set CRTC address to next buffer
Horizontal displayed = 32

IRQ1 seems to be most stable.
Most critical register changes are at the start of the second cycle.
Run second cycle on IRQ1 continuous
Set first cycle on IRQ2 one shot
Set plot on IRQ2 second value

Think vsync is arriving late...

Stop returning IRQ1V to the MOS
Master @ LQ = &21BB = 10.4fps (apparent!)

OUTRO TODO
~~~
- Speed up CLS
- Flicker?
- BBC Micro timing (not Master) - done
- End gracefully not black screen
- Chain from main sequence - done
- Switch to MODE 4 might be simpler? (after all that...) done

MODE 4
~~~
Can avoid having to reset horizontal total.
And less to draw.
Use 2x 80x14 = 2x 4480 = 8960
Plus 1x 80x18 = 5760
Total = 14720 = &3980. Screen start &4680.
Gives us 4K free.

Apparently I didn't finish predividing the vertices by 2?!
~~~
